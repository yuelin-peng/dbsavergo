// Code generated by Kitex v0.1.4. DO NOT EDIT.

package dbsaverservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"workspace/dbsavergo/kitex_gen/db_saver_service"
)

func serviceInfo() *kitex.ServiceInfo {
	return dBSaverServiceServiceInfo
}

var dBSaverServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "DBSaverService"
	handlerType := (*db_saver_service.DBSaverService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SaveOrder":  kitex.NewMethodInfo(saveOrderHandler, newDBSaverServiceSaveOrderArgs, newDBSaverServiceSaveOrderResult, false),
		"QueryOrder": kitex.NewMethodInfo(queryOrderHandler, newDBSaverServiceQueryOrderArgs, newDBSaverServiceQueryOrderResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "db_saver_service",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.1.4",
		Extra:           extra,
	}
	return svcInfo
}

func saveOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*db_saver_service.DBSaverServiceSaveOrderArgs)
	realResult := result.(*db_saver_service.DBSaverServiceSaveOrderResult)
	success, err := handler.(db_saver_service.DBSaverService).SaveOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDBSaverServiceSaveOrderArgs() interface{} {
	return db_saver_service.NewDBSaverServiceSaveOrderArgs()
}

func newDBSaverServiceSaveOrderResult() interface{} {
	return db_saver_service.NewDBSaverServiceSaveOrderResult()
}

func queryOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*db_saver_service.DBSaverServiceQueryOrderArgs)
	realResult := result.(*db_saver_service.DBSaverServiceQueryOrderResult)
	success, err := handler.(db_saver_service.DBSaverService).QueryOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newDBSaverServiceQueryOrderArgs() interface{} {
	return db_saver_service.NewDBSaverServiceQueryOrderArgs()
}

func newDBSaverServiceQueryOrderResult() interface{} {
	return db_saver_service.NewDBSaverServiceQueryOrderResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SaveOrder(ctx context.Context, req *db_saver_service.SaveOrderRequest) (r *db_saver_service.SaveOrderResponse, err error) {
	var _args db_saver_service.DBSaverServiceSaveOrderArgs
	_args.Req = req
	var _result db_saver_service.DBSaverServiceSaveOrderResult
	if err = p.c.Call(ctx, "SaveOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryOrder(ctx context.Context, req *db_saver_service.QueryOrderRequest) (r *db_saver_service.QueryOrderResponse, err error) {
	var _args db_saver_service.DBSaverServiceQueryOrderArgs
	_args.Req = req
	var _result db_saver_service.DBSaverServiceQueryOrderResult
	if err = p.c.Call(ctx, "QueryOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
