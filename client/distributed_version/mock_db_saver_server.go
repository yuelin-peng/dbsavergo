// Code generated by MockGen. DO NOT EDIT.
// Source: rpc.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBSaverServer is a mock of DBSaverServer interface.
type MockDBSaverServer struct {
	ctrl     *gomock.Controller
	recorder *MockDBSaverServerMockRecorder
}

// MockDBSaverServerMockRecorder is the mock recorder for MockDBSaverServer.
type MockDBSaverServerMockRecorder struct {
	mock *MockDBSaverServer
}

// NewMockDBSaverServer creates a new mock instance.
func NewMockDBSaverServer(ctrl *gomock.Controller) *MockDBSaverServer {
	mock := &MockDBSaverServer{ctrl: ctrl}
	mock.recorder = &MockDBSaverServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBSaverServer) EXPECT() *MockDBSaverServerMockRecorder {
	return m.recorder
}

// QueryOrder mocks base method.
func (m *MockDBSaverServer) QueryOrder(ctx context.Context, orderNO string) (*Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOrder", ctx, orderNO)
	ret0, _ := ret[0].(*Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOrder indicates an expected call of QueryOrder.
func (mr *MockDBSaverServerMockRecorder) QueryOrder(ctx, orderNO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOrder", reflect.TypeOf((*MockDBSaverServer)(nil).QueryOrder), ctx, orderNO)
}

// SaveOrder mocks base method.
func (m *MockDBSaverServer) SaveOrder(ctx context.Context, order *Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockDBSaverServerMockRecorder) SaveOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockDBSaverServer)(nil).SaveOrder), ctx, order)
}
