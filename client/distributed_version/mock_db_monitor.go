// Code generated by MockGen. DO NOT EDIT.
// Source: db_monitor_interface.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBMonitor is a mock of DBMonitor interface.
type MockDBMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockDBMonitorMockRecorder
}

// MockDBMonitorMockRecorder is the mock recorder for MockDBMonitor.
type MockDBMonitorMockRecorder struct {
	mock *MockDBMonitor
}

// NewMockDBMonitor creates a new mock instance.
func NewMockDBMonitor(ctrl *gomock.Controller) *MockDBMonitor {
	mock := &MockDBMonitor{ctrl: ctrl}
	mock.recorder = &MockDBMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBMonitor) EXPECT() *MockDBMonitorMockRecorder {
	return m.recorder
}

// GetDBAbnormalDuration mocks base method.
func (m *MockDBMonitor) GetDBAbnormalDuration(ctx context.Context) ([]TimeInterval, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAbnormalDuration", ctx)
	ret0, _ := ret[0].([]TimeInterval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAbnormalDuration indicates an expected call of GetDBAbnormalDuration.
func (mr *MockDBMonitorMockRecorder) GetDBAbnormalDuration(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAbnormalDuration", reflect.TypeOf((*MockDBMonitor)(nil).GetDBAbnormalDuration), ctx)
}
