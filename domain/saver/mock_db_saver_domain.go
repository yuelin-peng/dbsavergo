// Code generated by MockGen. DO NOT EDIT.
// Source: db_saver_domain.go

// Package saver is a generated GoMock package.
package saver

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	do "github.com/yuelin-peng/dbsavergo/domain/saver/do"
)

// MockDBSaverDomain is a mock of DBSaverDomain interface.
type MockDBSaverDomain struct {
	ctrl     *gomock.Controller
	recorder *MockDBSaverDomainMockRecorder
}

// MockDBSaverDomainMockRecorder is the mock recorder for MockDBSaverDomain.
type MockDBSaverDomainMockRecorder struct {
	mock *MockDBSaverDomain
}

// NewMockDBSaverDomain creates a new mock instance.
func NewMockDBSaverDomain(ctrl *gomock.Controller) *MockDBSaverDomain {
	mock := &MockDBSaverDomain{ctrl: ctrl}
	mock.recorder = &MockDBSaverDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBSaverDomain) EXPECT() *MockDBSaverDomainMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockDBSaverDomain) Query(ctx context.Context, orderNO string) (*do.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, orderNO)
	ret0, _ := ret[0].(*do.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDBSaverDomainMockRecorder) Query(ctx, orderNO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDBSaverDomain)(nil).Query), ctx, orderNO)
}

// Save mocks base method.
func (m *MockDBSaverDomain) Save(ctx context.Context, order *do.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDBSaverDomainMockRecorder) Save(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDBSaverDomain)(nil).Save), ctx, order)
}
