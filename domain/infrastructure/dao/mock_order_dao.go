// Code generated by MockGen. DO NOT EDIT.
// Source: order_dao.go

// Package dao is a generated GoMock package.
package dao

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	do "github.com/yuelin-peng/dbsavergo/domain/saver/do"
)

// MockOrderDAO is a mock of OrderDAO interface.
type MockOrderDAO struct {
	ctrl     *gomock.Controller
	recorder *MockOrderDAOMockRecorder
}

// MockOrderDAOMockRecorder is the mock recorder for MockOrderDAO.
type MockOrderDAOMockRecorder struct {
	mock *MockOrderDAO
}

// NewMockOrderDAO creates a new mock instance.
func NewMockOrderDAO(ctrl *gomock.Controller) *MockOrderDAO {
	mock := &MockOrderDAO{ctrl: ctrl}
	mock.recorder = &MockOrderDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderDAO) EXPECT() *MockOrderDAOMockRecorder {
	return m.recorder
}

// QueryByOrderNO mocks base method.
func (m *MockOrderDAO) QueryByOrderNO(ctx context.Context, orderNO string) (*do.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByOrderNO", ctx, orderNO)
	ret0, _ := ret[0].(*do.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByOrderNO indicates an expected call of QueryByOrderNO.
func (mr *MockOrderDAOMockRecorder) QueryByOrderNO(ctx, orderNO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByOrderNO", reflect.TypeOf((*MockOrderDAO)(nil).QueryByOrderNO), ctx, orderNO)
}

// SetNX mocks base method.
func (m *MockOrderDAO) SetNX(ctx context.Context, newOrder *do.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", ctx, newOrder)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNX indicates an expected call of SetNX.
func (mr *MockOrderDAOMockRecorder) SetNX(ctx, newOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockOrderDAO)(nil).SetNX), ctx, newOrder)
}

// SetWithCas mocks base method.
func (m *MockOrderDAO) SetWithCas(ctx context.Context, newOrder, oldOrder *do.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithCas", ctx, newOrder, oldOrder)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWithCas indicates an expected call of SetWithCas.
func (mr *MockOrderDAOMockRecorder) SetWithCas(ctx, newOrder, oldOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithCas", reflect.TypeOf((*MockOrderDAO)(nil).SetWithCas), ctx, newOrder, oldOrder)
}
